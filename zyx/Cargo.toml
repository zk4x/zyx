[package]
name = "zyx"
version = "0.15.0"
edition = "2021"
authors = ["zk4x"]
description = "Zyx machine learning library"
documentation = "https://docs.rs/zyx"
readme = "README.md"
homepage = "https://github.com/zk4x/zyx"
repository = "https://github.com/zk4x/zyx"
license = "MIT OR Apache-2.0"
keywords = ["tensor", "deep-learning", "neural-network", "autodiff"]
categories = ["computer-vision", "science"]

[badges]
maintenance = { status = "experimental" }

[dependencies]
# Good, well written minimal dependencies
# libloading is used to access cuda, opencl and hsa runtimes
libloading = { version = "0.8.5", default-features = false } # ISC

# To be removed
# Memory mapped loading of tensors from disk
memmap2 = { version = "0.9.5" }
# nanoserde is used to read backend config
nanoserde = { version = "*", default-features = false }
# xdg is used to read backend config
xdg = { version = "2.5.2", default-features = false } # MIT or Apache 2.0
# Support for f8 dtypes
float8 = { version = "0.1.1", default-features = false } # MIT or Apache 2.0
# Support for f16 and bf16 dtypes
half = { version = "2.4.1", default-features = false } # MIT or Apache 2.0
# Progress bar for loading tensors, compilation ...
indicatif = { version = "0.17.9", default-features = false }

# Optional dependencies
# For caching of searched kernels
bitcode = { version = "0.6.3", default-features = false, features = [
    "std",
    "derive",
], optional = true } # MIT or Apache 2.0

# Lot of dependencies from wgpu, probably just don't use that
wgpu = { version = "23.0.1", default-features = false, features = [
    "wgsl",
], optional = true }
# Futures for wgpu axync mess. Some functions are async, while others using polling and it's a mess that deadlocks
futures = { version = "0.3.31", default-features = false, features = [
    "alloc",
], optional = true }
pollster = { version = "0.4.0", default-features = false, optional = true }

# gguf models
gguf = { version = "0.1.2", default-features = false, optional = true }

# Pyo3 is used only for python bindings
pyo3 = { version = "0.23.1", optional = true } # MIT or Apache 2.0

# Vulkano, will be later removed
vulkano = { version = "*", optional = true }

[dev-dependencies]
rand = { version = "*", default-features = false, features = ["std", "small_rng"] }

[lib]
crate-type = ["lib"] #, "cdylib"]

[features]
default = [
    "implicit_casting",
    #"disk_cache",
    #"wgpu",
    #"complex",
    #"gguf",
    #"py",
]

# Enables implicit casting to different dtype in binary operations with different dtypes
# and unary operations that are not implemented for the provided dtype.
# This tries to copy the default behaviour of pytorch, but since rust does not
# have implicit casting, we do not recommend using this feature.
implicit_casting = []

# Enables caching of optimized kernels to disk
disk_cache = ["dep:bitcode"]

# Enables wgpu backend
wgpu = ["dep:wgpu", "dep:pollster", "dep:futures"]

# Enables vulkan backend, dependency will be later removed
vulkan = ["dep:vulkano"]

# Enables loading of gguf models
gguf = ["dep:gguf"]

# Enables us to create python bindings with pyo3, annotates structs with pyclass
py = ["dep:pyo3"]

# Optimize for linking time, 'cause linker is so slow...
[profile.dev] # Modify profile settings via config.
opt-level = 0 # Optimization level.
debug = false # Include debug info.
#split-debuginfo = '...'  # Debug info splitting behavior.
strip = true            # Removes symbols or debuginfo.
debug-assertions = true # Enables debug assertions.
overflow-checks = true  # Enables runtime integer overflow checks.
lto = false             # Sets link-time optimization.
panic = 'unwind'        # The panic strategy.
incremental = true      # Incremental compilation.
codegen-units = 16      # Number of code generation units.
#rpath = false           # Sets the rpath linking option.

# This is just a runtime, no need for o3 vectorization and crazy function inlining
[profile.release]
opt-level = "z"
strip = true
debug-assertions = false
overflow-checks = true
lto = true
panic = "abort"
incremental = false
codegen-units = 1
debug = 0

# Just for the fuzzy tester
#[profile.test]
#opt-level = 3
#strip = true
#debug-assertions = false
#overflow-checks = true
#lto = true
#panic = "abort"
#incremental = false
#codegen-units = 1
#debug = 0
